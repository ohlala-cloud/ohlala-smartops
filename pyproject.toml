[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ohlala-smartops"
version = "0.1.0"
description = "AI-powered AWS EC2 management bot using Claude (Bedrock) and Microsoft Teams"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    {name = "Ohlala SmartOps Contributors"}
]
keywords = ["aws", "ec2", "ai", "claude", "bedrock", "teams", "chatbot", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    # AWS SDK
    "boto3>=1.35.0",
    "aioboto3>=12.0.0",
    # Microsoft Teams Bot Framework
    "botbuilder-core>=4.15.0",
    "botbuilder-schema>=4.15.0",
    "botframework-connector>=4.15.0",
    # AI/ML
    "anthropic>=0.40.0",
    # HTTP clients for MCP communication
    "aiohttp>=3.9.0",
    "httpx>=0.25.0",
    # Data handling
    "python-dateutil>=2.8.0",
    "croniter>=1.4.0",
    # Visualization
    "matplotlib>=3.8.0",
    "pillow>=10.1.0",
    # Configuration
    "python-dotenv>=1.0.0",
    # Logging
    "structlog>=23.2.0",
]

[project.optional-dependencies]
dev = [
    # Code formatting
    "black>=24.0.0",
    # Linting
    "ruff>=0.8.0",
    # Type checking
    "mypy>=1.13.0",
    "types-boto3>=1.0.0",
    "boto3-stubs[ec2,ssm,cloudwatch,bedrock,iam]>=1.35.0",
    "types-python-dateutil>=2.8.0",
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest-httpx>=0.26.0",
    # Pre-commit
    "pre-commit>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/ohlala-cloud/ohlala-smartops"
Repository = "https://github.com/ohlala-cloud/ohlala-smartops"
Issues = "https://github.com/ohlala-cloud/ohlala-smartops/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["ohlala_smartops*"]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PL",     # pylint
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]
ignore = [
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # Magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG",      # Unused function arguments in tests
    "PLR2004",  # Magic values in tests
]

[tool.ruff.lint.isort]
known-first-party = ["ohlala_smartops"]

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "botbuilder.*",
    "botframework.*",
    "matplotlib.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=ohlala_smartops",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "-vv",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "build", "dist"]
skips = ["B101"]  # Allow assert statements in test files
